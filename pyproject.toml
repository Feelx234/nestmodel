[build-system]
# AVOID CHANGING REQUIRES: IT WILL BE UPDATED BY PYSCAFFOLD!
requires = ["setuptools>=46.1.0", "setuptools_scm[toml]>=5"]
build-backend = "setuptools.build_meta"


[tool.setuptools_scm]
# For smarter version schemes and other configuration options,
# check out https://github.com/pypa/setuptools_scm
version_scheme = "no-guess-dev"


[project]
name = "nestmodel"
dynamic = ["version"]
authors = [{ name = "Felix I. Stamm", email = "felix.stamm@rwth-aachen.de" }]
description = "A package to randomize graphs using the configuration or nest-model."
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
]
keywords = [
    "graph",
    "randomization",
    "network",
    "configuration-model",
    "fixed-degree-sequence-model",
]
license = { file = "LICENSE" }
dependencies = [
    'numpy >= 1.23.5',
    'numba >= 0.56.4',
    'scipy',
    'matplotlib',
    'networkx',
    'brokenaxes',
    'nbconvert',
    'tqdm',
    'threadpoolctl',
]

[project.optional-dependencies]
test = ['pytest', 'pytest-cov', 'coverage[toml]']

[project.urls]
"Homepage" = "https://github.com/Feelx234/nestmodel"
"Bug Tracker" = "https://github.com/Feelx234/nestmodel/issues"

[tool.hatch.build]
exclude = ["scripts", "demo", "old_notebooks"]

[tool.pytest.ini_options]
addopts = "-ra --cov --cov-report html --cov-report term-missing"
testpaths = ["./tests"]
pythonpath = ["src"]

[tool.coverage.run]
branch = true
source = ["src/nestmodel"]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "pragma: no branch okay",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
]
omit = [ # Regexes for lines to exclude from consideration
    "*/ergm.py",
    "*/ERGM_experiments.py",
    "*/dict_graph.py",
    "*/io.py",
    "*/long_refinement_graphs.py",
    "*/visualization.py",
]


[tool.flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 125
extend_ignore = ["E203", "W503", "E741"]
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude = [".tox", "build", "dist", ".eggs"]


[tool.isort]
profile = "black"
known_first_party = ["nestmodel"]


[tool.pylint.basic]
# Good variable names which should always be accepted, separated by a comma.
good-names = [
    "R",
    "D",
    "T",
    "D_row",
    "S",
    "A",
    "F",
    "H",
    "F_vals",
    "F_val",
    "H_vals",
    "M",
    "SMALL_VAL",
    "LARGE_VAL",
    "MicroaggWilberCalculator_edu",
    "N_vals",
    "N",
    "setUp",
    "tearDown",
]

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
good-names-rgxs = ["^[_a-zGW][_a-z0-9L]?$"]

[tool.pylint.format]
max-line-length = 225

[tool.pylint."messages control"]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-final-newline",
    "superfluous-parens",
]

[tool.pylint.main]
ignore = [".coveragerc"]
ignore-paths = [".coveragerc|.coveragerc"]


[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.24
envlist = default
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    test
commands =
    pytest {posargs}


# # To run `tox -e lint` you need to make sure you have a
# # `.pre-commit-config.yaml` file. See https://pre-commit.com
# [testenv:lint]
# description = Perform static analysis and style checks
# skip_install = True
# deps = pre-commit
# passenv =
#     HOMEPATH
#     PROGRAMDATA
#     SETUPTOOLS_*
# commands =
#     pre-commit run --all-files {posargs:--show-diff-on-failure}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# https://setuptools.pypa.io/en/stable/build_meta.html#how-to-use-it
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist", "docs/_build")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}
# By default, both `sdist` and `wheel` are built. If your sdist is too big or you don't want
# to make it available, consider running: `tox -e build -- --wheel`


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
passenv =
    SETUPTOOLS_*
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    # See: https://twine.readthedocs.io/en/latest/
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
"""
